#################################################################################################################################### linux
which yarn (просмотр исходников установки)

#################################################################################################################################### postgresql
sudo apt-get --purge remove postgresql (удаление postgresql)
sudo -u postgres createuser --superuser ilnar (создание суперпользователя)
dpkg -l | grep postgres (проверка установленных пакетов)
sudo -u postgres psql postgres (открытие консоли)
postgres=# \l (проверка списков базы данных)
postgres=# CREATE DATABASE testdb; (создание базы данных)
postgres=# DROP DATABASE testdb; (удаление бд)
postgres=# \c testdb; (вход в дб)
testdb-# \d (список таблиц)
testdb-# \d company (столбцы в таблице company)

************************************************************************************************************ sql

CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
);

CREATE INDEX salary_index ON COMPANY (salary); (создание индекса)
ALTER TABLE table_name ADD column_name datatype; (добавление столбца)
ALTER TABLE table_name DROP COLUMN column_name; (удаление столбца)
ALTER TABLE table_name ALTER COLUMN column_name TYPE datatype; (изменение типа столбца)
ALTER TABLE table_name MODIFY column_name datatype NOT NULL; (добавление ограничения на столбец)
DROP INDEX salary_index; (удаление индекса)
DROP TABLE COMPANY; (удаление таблицы)
TRUNCATE TABLE COMPANY; (удаление всех данных в таблицу)
DROP TABLE department, company;
SELECT * FROM COMPANY WHERE SALARY = 10000; (простой запрос)
SELECT COUNT(*) AS "RECORDS" FROM COMPANY; (количетво записей в таблице);
SELECT CURRENT_TIMESTAMP; (текущее время);
SELECT * FROM COMPANY WHERE AGE >= 25 AND SALARY >= 65000; (использование оператора и)
SELECT * FROM COMPANY WHERE AGE >= 25 OR SALARY >= 65000; (использование оператора или)
SELECT * FROM COMPANY WHERE AGE IN ( 25, 27 ); (поиск через возможные значения)
SELECT * FROM COMPANY WHERE AGE NOT IN ( 25, 27 ); (поиск с исключением)
SELECT * FROM COMPANY WHERE AGE BETWEEN 25 AND 27; (поиск между значениями)
SELECT * FROM COMPANY WHERE AGE IS NOT NULL; (проверка на пустоту)
SELECT * FROM COMPANY WHERE NAME LIKE 'Pa%'; (поиск через LIKE в строках)
SELECT * FROM COMPANY WHERE NAME LIKE 'Pa_'; (поиск через LIKE в строках с добавлением лишь одного любого знака)
SELECT * FROM COMPANY WHERE AGE::text LIKE '2%'; (поиск с переводом на текстовый формат)
SELECT AGE FROM COMPANY WHERE EXISTS (SELECT AGE FROM COMPANY WHERE SALARY > 65000); (подзапрос  с последующей проверкой EXISTS)
SELECT * FROM COMPANY WHERE AGE > (SELECT AGE FROM COMPANY WHERE SALARY > 65000); (подзапрос с проверкой на возраст)
SELECT * FROM COMPANY LIMIT 3 OFFSET 2; (лимит полученных результатов со смещение после 2)
SELECT * FROM COMPANY ORDER BY AGE ASC; (получение с увелечением по столбцу age)
SELECT * FROM COMPANY ORDER BY AGE DESC; (получение с уменьшением по столбцу age)
SELECT * FROM COMPANY ORDER BY NAME, SALARY ASC; (получение с увеличением по NAME и ASC)
SELECT NAME, SUM(SALARY) FROM COMPANY GROUP BY NAME; (получение суммы с группировкой по NAME)
SELECT NAME, SUM(SALARY) FROM COMPANY GROUP BY NAME ORDER BY NAME; (получение данных группировкой повторяющихся данных с увелечением по NAME)
SELECT NAME FROM COMPANY GROUP BY name HAVING count(name) > 1; (HAVING это аналог WHERE только совместно с GROUP BY)
SELECT DISTINCT name FROM COMPANY; (устраняет дубликаты)
************************* sql join*********************
SELECT EMP_ID, NAME, DEPT FROM COMPANY INNER JOIN DEPARTMENT ON COMPANY.ID = DEPARTMENT.EMP_ID; (основной JOIN)
SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT ON COMPANY.ID = DEPARTMENT.EMP_ID; (объединяет строки с упором на лево)
SELECT EMP_ID, NAME, DEPT FROM COMPANY FULL OUTER JOIN DEPARTMENT ON COMPANY.ID = DEPARTMENT.EMP_ID; (полное объединнеие с возможными пустыми)
SELECT EMP_ID, NAME, DEPT FROM COMPANY INNER JOIN DEPARTMENT ON COMPANY.ID = DEPARTMENT.EMP_ID 
 UNION
   SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT ON COMPANY.ID = DEPARTMENT.EMP_ID; (UNION объедиение без дубликатов)
SELECT EMP_ID, NAME, DEPT FROM COMPANY INNER JOIN DEPARTMENT ON COMPANY.ID = DEPARTMENT.EMP_ID 
 UNION ALL
   SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT ON COMPANY.ID = DEPARTMENT.EMP_ID; (UNION ALL объедиение c дубликатами)

With CTE AS(Select ID, NAME, AGE, ADDRESS, SALARY FROM COMPANY ) Select * From CTE; (запрос c with для составления сложных запросов)
WITH moved_rows AS (DELETE FROM COMPANY WHERE SALARY >= 30000 RETURNING *) Select * From moved_rows; (пример запроса с WITH и RETURNING)
INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY,JOIN_DATE) VALUES (1, 'Paul', 32, 'California', 20000.00,'2001-07-13'); (запись в таблицу)
UPDATE COMPANY SET SALARY = 15000 WHERE ID = 3; (обновление записи)
UPDATE COMPANY SET ADDRESS = 'Texas', SALARY=20000; (обновление всех столбцов)
DELETE FROM COMPANY WHERE ID = 2; (удаление столбцов)
*****************************************************************************************************************


#################################################################################################################################### rails
EDITOR=subl bundle open spree (просмотр исходников гема) 

#################################################################################################################################### rbenv
rbenv install 2.1.3 (установка версий руби)

#################################################################################################################################### redis
KEYS * (получение списка ключей)
FLUSHDB (Removes data from your connection's CURRENT database)
FLUSHALL (Removes data from ALL databases)
redis-cli (консоль редис)
set mykey somevalue (пример установки пары ключ значение)
get mykey (получение значения по ключу)

#################################################################################################################################### sublime
{
	"auto_complete": true,
	"auto_complete_commit_on_tab": true,
	"bootstrapped": true,
	"color_scheme": "Packages/User/SublimeLinter/primer.light (SL).tmTheme",
	"copy_with_empty_selection": true,
	"ensure_newline_at_eof_on_save": true,
	"index_files": true,
	"installed_packages":
	[
		"10% Too Dull for My Tastes Color Scheme",
		"AdvancedNewFile",
		"All Autocomplete",
		"Clipboard Manager",
		"DocBlockr",
		"Emmet",
		"GitGutter",
		"SublimeLinter"
	],
	"rulers":
	[
		79
	],
	"tab_size": 2,
	"theme": "Primer.sublime-theme",
	"theme_primer_sidebar_font_large": true,
	"theme_primer_sidebar_tree_small": true,
	"theme_primer_tabs_font_large": true,
	"translate_tabs_to_spaces": true,
	"trim_trailing_white_space_on_save": true,
	"word_separators": "./\\()\"'-:,.;<>~@#$%^&*|+=[]{}`~"
}
############################################################################################################################### comands to live
жалоба к чему либо, лишь притягивает и усиливает объект жалобы
отрицательные моменты и плохие ситуаций необходимо плюсовать и складывать вместе для удачи
правда она одна и каждый человек заплатит одинаковую долю справедливости
планирование всегда лучше чем отличная идея
отсутствие результата виден до прихода кубка стенли
привычки определяют 90% результата
спорт повышает уровень всего
еда это то что мы есть

############################################################################################################################### heroku
git push heroku master (отправка кода на heroku)
heroku run rails db:migrate (создание базы данных)
heroku addons:info (список аддонов)

############################################################################################################################### elasticsearch
sudo service elasticsearch start (старт elasticsearch)
http://localhost:9200 (порт)
curl -X GET 'http://localhost:9200' (порт на котором виден результат работы, по дефолту)
curl -X POST 'http://localhost:9200/tutorial/helloworld/1' -d '{ "message": "Hello World!" }' (запись и индексирование)
curl -X GET 'http://localhost:9200/tutorial/helloworld/1?pretty' (получение)
curl -X PUT 'localhost:9200/tutorial/helloworld/1?pretty' -d ' (обновление)










